<?php


	namespace C3\C3baxi\Controller;

	use C3\C3baxi\Domain\Model\Booking;
	use C3\C3baxi\Utility\GeneralUtility;
	use Psr\Log\LogLevel;
	use TYPO3\CMS\Extbase\Utility\DebuggerUtility;

	class BookingController extends \TYPO3\CMS\Extbase\Mvc\Controller\ActionController {
		/**
		 * @var \C3\C3baxi\Domain\Repository\BookingRepository
		 * @inject
		 */
		protected $repository = NULL;
		/**
		 * @var \C3\C3baxi\Domain\Repository\RatingRepository
		 * @inject
		 */
		protected $ratings = NULL;
		/**
		 * @var \C3\C3baxi\Domain\Repository\HaltestelleRepository
		 * @inject
		 */
		protected $stations = NULL;
		/**
		 * @var \C3\C3baxi\Domain\Repository\UserRepository
		 * @inject
		 */
		protected $users = NULL;
		/**
		 * @var \C3\C3baxi\Domain\Repository\FahrtRepository
		 * @inject
		 */
		protected $fahrten = NULL;
		/**
		 * @inject
		 * @var \C3\C3baxi\Domain\Repository\TtContentRepository
		 */
		protected $ttContentRepository;

		protected $uriBuilder;

		public function __construct() {
			$objectManager = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstance( \TYPO3\CMS\Extbase\Object\ObjectManager::class );
			$this->uriBuilder = $objectManager->get( \TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder::class );
			$this->uriBuilder
				->setUseCacheHash( FALSE )
				->setNoCache( TRUE )
				->setTargetPageUid( 1 )
				->setTargetPageType( 666 );
			parent::__construct();
		}

		protected function emitBeforeCallActionMethodSignal( array $preparedArguments ) {
			parent::emitBeforeCallActionMethodSignal( $preparedArguments ); // TODO: Change the autogenerated stub
		}

		function indexAction() {

		}

		function listAction() {
			if ( TYPO3_MODE == 'BE' ) {
				$bookings = $this->repository->findAll()->toArray();
			} else {
				$bookings = $this->repository->findByUser( 3 )->toArray();
				$this->initiateJSSettings();
			}
			// Get Content values
			list($CType, $currentContentId) = explode( ':', $GLOBALS['TSFE']->currentRecord );
			$content = $this->ttContentRepository->findByUid($currentContentId)->getFirst();
			$this->view->assign( 'content', $content );

			// FAQ Link
			$headerLink = $content->getHeaderLink();
			if( $headerLink != '' ) {
				preg_match( '/&uid=([0-9]{1,})/', $headerLink, $faqUid );
				$this->view->assign( 'helpUid', $faqUid[1] );
			}


			$now = new \DateTime();
			$comming = $past = [];

			array_walk( $bookings, function ( $item, $idx, $now ) use ( &$comming, &$past ) {
				if ( $item->getDate() > $now ) {
					$comming[] = $item;
				} else {
					$past[] = $item;
				}
			}, $now );

			$this->view->assign( 'booking_comming', $comming );
			$this->view->assign( 'booking_past', $past );
		}

		function listBEAction() {
			$bookings = $this->repository->findAll();
		}

		function newAction() {

			$zoneList = FALSE;
			$timeList = [];
			$interval = new \DateInterval( 'PT30M' );
			$period = new \DatePeriod( new \DateTime( '2019-1-1 05:00:00' ), $interval, new \DateTime( '2019-1-1 21:00:00' ) );
			foreach ( $period as $p ) {
				$timeList[$p->format( "H:i" )] = $p->format( "H:i" );
			}
			$this->view->assign( 'timeList', $timeList );

			if ( $this->request->hasArgument( 'date' ) && $this->request->hasArgument( 'ride' ) ) {
				$datum = new \DateTime();
				$datum->setTimezone( new \DateTimeZone( 'EUROPE/BERLIN' ) );
				$datum->setTimestamp( $this->request->getArgument( 'date' ) );
				$this->view->assign( 'datum', $datum );

				$ride = $this->fahrten->findByUid( $this->request->getArgument( 'ride' ) );

				$time = new \DateTime();
				$time->setTimestamp( $ride->getBuchbarBis() );
				$time->setTimezone( new \DateTimeZone( 'EUROPE/BERLIN' ) );
				$minutes = $time->format( 'i' );

				$diff = $minutes;
				if ( $minutes >= 30 ) {
					$diff = $minutes - 30;
				}
				$time->sub( new \DateInterval( 'PT' . abs( $diff ) . 'M' ) );

				$this->view->assign( 'time', $time->format( 'H:i' ) );

				$zoneList = [];
				foreach ( $ride->getLinie()->getZonen() as $zone ) {
					$zoneList[] = $zone->getUid();
				}
			}
			$stations = $this->stations->findAllAssigned( $zoneList );

			$this->view->assign( 'users', $this->users->findAll() );
			$this->view->assign( 'stations', $stations );
		}

		function createAction() {

			$arguments = $this->request->getArguments();

			$booking = new Booking();
			$booking->setDate( $arguments['date'] );
			$booking->setAdults( $arguments['adults'] );
			$error = FALSE;

			if ( $startStation = $this->stations->findByUid( $arguments['startStation'] ) ) {
				$booking->setStartStation( $startStation );
			} else {
				$error = TRUE;
			}

			if ( $endStation = $this->stations->findByUid( $arguments['endStation'] ) ) {
				$booking->setEndStation( $endStation );
			} else {
				$error = TRUE;
			}

			if ( $user = $this->users->findByUid( $arguments['user'] ) ) {
				$booking->setUser( $user );
			} else {
				$error = TRUE;
			}

			if ( $fahrt = $this->fahrten->findByUid( $arguments['fahrt'] ) ) {
				$booking->setFahrt( $fahrt );
			} else {
				$error = TRUE;
			}

			$booking->setInfo( $arguments['info'] );
			$booking->setPid( 14 );
			if ( !$error ) {
				$this->repository->add( $booking );

				$this->redirect( 'index', 'Baxi', NULL, ['bookedRide' => $arguments['fahrt'], 'date' => $arguments['date']] );
			} else {
				$this->redirect( 'index', 'Baxi', NULL, ['bookedRide' => $arguments['fahrt'], 'date' => $arguments['date']] );
			}
		}

		function editAction( Booking $booking ) {
			$this->initiateJSSettings();
		}

		function updateAction() {

		}
		
		function cancelAction( Booking $booking ) {
			$booking->setDeleted( 1 );
			$this->repository->update( $booking );
			$this->redirectToUri( '/konto/gebuchte-fahrten', 0 );
		}

		function detailAction( Booking $booking ) {

			$this->initiateJSSettings();
			$now = new \DateTime();

			$date = $booking->getDate();

			$buchbarBis = new \DateTime();
			$buchbarBis->setTimezone( new \DateTimeZone( 'Europe/Berlin' ) );
			$buchbarBis->setTimestamp( $booking->getFahrt()->getBuchbarBis() );

			$buchbarBis = GeneralUtility::combineDate( $buchbarBis, $date );

			$departure = $booking->getFahrt()->getStationTime( $booking->getStartStation() );
			$arrival = $booking->getFahrt()->getStationTime( $booking->getEndStation() );

			$ratingAllowed = TRUE;
			$foundRating = $this->ratings->findForUser( $GLOBALS["TSFE"]->fe_user->user['uid'], $booking->getUid() );
			if ( $foundRating->count() > 0 ) $ratingAllowed = FALSE;

			$this->view->assign( 'departure', $departure );
			$this->view->assign( 'arrival', $arrival );
			$this->view->assign( 'isComming', $buchbarBis > $now );
			$this->view->assign( 'rating_allowed',  $ratingAllowed );
			$this->view->assign( 'now', $now );
			$this->view->assign( 'booking', $booking );
		}

		protected function alterDate( $time, $referer, $asObject = FALSE ) {
			$timezone = new \DateTimeZone( 'Europe/Berlin' );

			if ( is_int( $time ) ) $time = \DateTime::createFromFormat( 'U', $time, $timezone );
			if ( is_int( $referer ) ) $referer = \DateTime::createFromFormat( 'U', $referer, $timezone );

			$time->setDate( $referer->format( 'Y' ), $referer->format( 'm' ), $referer->format( 'd' ) );
			return $asObject ? $time : $time->getTimestamp();
		}

		protected function initiateJSSettings() {
			$pageRender = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstance( \TYPO3\CMS\Core\Page\PageRenderer::class );
			$this->uriBuilder->reset()
				->setCreateAbsoluteUri( TRUE )
				->setTargetPageUid( 1 )
				->setTargetPageType( 666 );

			$baxiSettings = [
				'ticketType' => 'adult',
				'loggedIn'   => isset( $GLOBALS["TSFE"]->fe_user->user['uid'] ),
				//				'favorites'  => isset( $GLOBALS["TSFE"]->fe_user->user['uid'] ) ? $this->getUserFavorites() : [],
				'ajaxUrl'    => [
					'haltestelle'    => $this->uriBuilder->setArguments( [] )
						->uriFor( 'autocomplete', ['type' => 'haltestelle'], 'Ajax', 'C3baxi', 'BaxiSuche' ),
					'station'        => $this->uriBuilder->setArguments( [] )
						->uriFor( 'stationDetail', [], 'Ajax', 'C3baxi', 'BaxiSuche' ),
					'favorites'      => $this->uriBuilder->setArguments( [] )
						->uriFor( 'favorites', ['doAction' => 'findAll'], 'Ajax', 'C3baxi', 'BaxiSuche' ),
					'help'           => $this->uriBuilder->setArguments( [] )
						->uriFor( 'help', [], 'Ajax', 'C3baxi', 'BaxiSuche' ),
					'rating'         => $this->uriBuilder->setArguments( [] )
						->uriFor( 'rating', [], 'Ajax', 'C3baxi', 'BaxiSuche' ),
					/** deprecated */
					'addFavorite'    => $this->uriBuilder->setArguments( [] )
						->uriFor( 'addFavorite', [], 'Ajax', 'C3baxi', 'BaxiSuche' ),
					'removeFavorite' => $this->uriBuilder->setArguments( [] )
						->uriFor( 'removeFavorite', [], 'Ajax', 'C3baxi', 'BaxiSuche' ),
				],
				'mapCenter'  => [ // default is Tirschenreuth, Germany
				                  'lat' => 49.8817161,
				                  'lng' => 12.3303441
				]
			];
			$pageRender->addJsFooterInlineCode( 'baxiSearchSettings', 'var baxiSearchSettings = ' . json_encode( $baxiSettings ) );

		}

	}